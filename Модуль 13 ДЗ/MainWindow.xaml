<Window x:Class="Модуль_13_ДЗ.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:local="clr-namespace:Модуль_13_ДЗ"
        mc:Ignorable="d"
        Title="Банк" Height="450" Width="1100">

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding CloseCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Window.Resources>

        <CollectionViewSource x:Key="departmentscb" Source="{Binding AllDepartmentsViewModel.Departments}"/>
        <CollectionViewSource x:Key="accountTypescb" Source="{Binding AllAccountTypesViewModel.AccountTypes}"/>
        
        <Style TargetType="DataGrid">
            <!-- Make the border and grid lines a little less imposing -->
            <Setter Property="BorderBrush" Value="#DDDDDD" />
            <Setter Property="HorizontalGridLinesBrush" Value="#DDDDDD" />
            <Setter Property="VerticalGridLinesBrush" Value="#DDDDDD" />

            <Setter Property="RowStyle">
                <Setter.Value>
                    <Style TargetType="DataGridRow">
                        <Style.Triggers>
                            <!-- Highlight a grid row as the mouse passes over -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="LightCyan" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="CellStyle">
                <Setter.Value>
                    <Style TargetType="DataGridCell">
                        <Style.Triggers>
                            <!-- Highlight selected rows -->
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="#ff66ccff" />
                                <Setter Property="BorderBrush" Value="Transparent" />
                                <Setter Property="Foreground" Value="Black" />
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="Background" Value="#ff66ccff" />
                                <Setter Property="BorderBrush" Value="Black" />
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="Foreground" Value="Black" />
                            </Trigger>
                        </Style.Triggers>
                        <!-- Add some padding around the contents of a cell -->
                        <Setter Property="Padding" Value="4,3,4,3" />
                        <Setter Property="BorderBrush" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="DataGridCell">
                                    <Border Padding="{TemplateBinding Padding}" 
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}">
                                        <ContentPresenter />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="FocusVisualStyle">
                            <Setter.Value>
                                <Style TargetType="Control">
                                    <Setter Property="BorderBrush" Value="Transparent" />
                                </Style>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="bxStyle"  TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border x:Name="border" CornerRadius="5" BorderBrush="AntiqueWhite"  BorderThickness="1"
                                Padding="2" Margin="0 5 0 0" >
                            <ContentControl Content="{TemplateBinding Text}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="#909090"/>
                                <Setter Property="FontWeight" Value="Bold" />
                            </Trigger>
                            <Trigger Property="IsFocused" Value="true">
                                <Setter Property="Foreground" Value="Blue" />
                                <Setter Property="BorderBrush" TargetName="border" Value="Blue"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ComboBoxTextBoxStyle" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid>
                            <Border CornerRadius="5,0,0,5"
                            BorderThickness="1"
                            Background="{TemplateBinding Background}"
                                BorderBrush="AntiqueWhite">
                                <ScrollViewer x:Name="PART_ContentHost"/>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ComboBoxButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border   
                             Background="White"   
                             x:Name="border"   
                             CornerRadius="0,5,5,0"   
                             BorderThickness="0,1,1,1"  
                             BorderBrush="AntiqueWhite">    
                            <ContentPresenter />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type ComboBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="9*"/>
                                <ColumnDefinition Width="1*"/>
                            </Grid.ColumnDefinitions>
                            <TextBox Name="PART_EditableTextBox"
                                 Style="{StaticResource ComboBoxTextBoxStyle}"
                                 Padding="5,0,0,0"
                                 Height="{TemplateBinding Height}"/>
                            <ToggleButton Grid.Column="1" Margin="0"
                                     Height="{TemplateBinding Height}"
                                     Style="{StaticResource ComboBoxButtonStyle}"
                                     Focusable="False"
                                     IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                     ClickMode="Press">
                                <Path Grid.Column="1"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="M 0 0 L 4 4 L 8 0 Z"
                                  Fill="DodgerBlue" />
                            </ToggleButton>
                            <ContentPresenter Name="ContentSite"
                                      Content="{TemplateBinding SelectionBoxItem}"
                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                      VerticalAlignment="Center"
                                      HorizontalAlignment="Left"
                                      Margin="5,0,0,0"/>
                            <Popup Name="Popup"
                               Placement="Bottom"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               AllowsTransparency="True" 
                               Focusable="False"
                               PopupAnimation="Slide">
                                <Grid Name="DropDown"
                                  SnapsToDevicePixels="True"                
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border 
                                    x:Name="DropDownBorder"
                                    BorderThickness="1"
                                    CornerRadius="5"
                                    Background="Azure"
                                    BorderBrush="AntiqueWhite"/>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


    </Window.Resources>

    <TabControl>
        <TabItem>
            <TabItem.Header>
                Операции
            </TabItem.Header>
            <TabItem.Content>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="500" Width="3*"/>
                        <ColumnDefinition MinWidth="3"  Width="Auto"/>
                        <ColumnDefinition MinWidth="550" Width="4*"/>
                    </Grid.ColumnDefinitions>
                    
                    <GridSplitter Grid.Column="1" 
                      ShowsPreview="False" 
                      MinWidth="3"
                      BorderThickness="0.5"
                      Background="AntiqueWhite"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Stretch" Width="3" />

                <DockPanel Grid.Column="0">
                    <Grid DockPanel.Dock="Top">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                                <RowDefinition/>
                        </Grid.RowDefinitions>
                        
                        
                        <StackPanel Grid.Column="0" Margin="2 0 0 0">                                
                            <TextBlock Text="Департамент"/>
                            <ComboBox  x:Name="department"  
                                      ItemsSource="{Binding AllDepartmentsViewModel.Departments}"
                                      DisplayMemberPath="Name" 
                                      SelectedValuePath="Name"
                                      SelectedItem="{Binding AllDepartmentsViewModel.SelectedDepartment, Mode=TwoWay}" 
                                      Margin="0 5 0 0"
                                      HorizontalContentAlignment="Stretch"
                                      Height="22"
                            />
                            
                        </StackPanel>
                        
                        <StackPanel Grid.Column ="1">
                            <TextBlock  Text="Ставка"/>
                                <TextBox Padding="2" ToolTip="Ставка по вкладам" Text="{Binding ElementName = department, Path = SelectedItem.InterestRate}" IsReadOnly="True" Style="{StaticResource bxStyle}"/>
                        </StackPanel>

                        <StackPanel Grid.Row="0" Grid.Column="2" Margin="2 0 0 0">
                            <TextBlock Text="Мин. сумма вклада"/>
                                <TextBox Padding="2" ToolTip="Минимальная сумма вклада" Text="{Binding ElementName = department, Path = SelectedItem.MinAmount}" IsReadOnly="True" Style="{StaticResource bxStyle}"/>
                        </StackPanel>

                        <StackPanel Grid.Row="0"  Grid.Column ="3">
                            <TextBlock Text="Мин. срок вклада"/>
                                <TextBox Padding="2"  ToolTip="Минимальный срок вклада" Text="{Binding ElementName = department, Path = SelectedItem.MinTerm}" IsReadOnly="True" Style="{StaticResource bxStyle}"/>
                        </StackPanel>

                    </Grid>


                    <DataGrid x:Name="clients" 
                              DockPanel.Dock="Top" 
                              ItemsSource="{Binding AllClientsViewModel.Clients}"
                              SelectedItem="{Binding AllClientsViewModel.SelectedClient, Mode=TwoWay}"
                              SelectionMode="Single"
                              IsSynchronizedWithCurrentItem="True"
                              AutoGenerateColumns="False"
                              CanUserAddRows="False">
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Имя" Binding="{Binding Path=FirstName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                <DataGridTextColumn Header="Фамилия" Binding="{Binding Path = Surname, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                <DataGridTextColumn Header="Отчество" Binding="{Binding Path = SecondName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                <DataGridTextColumn Header="Сумма" Binding="{Binding Path = Amount, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                <DataGridCheckBoxColumn Header="Плохая история"  Binding="{Binding Path = BadHistory, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                            </DataGrid.Columns>
                            <DataGrid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Добавить клиента" Command="{Binding AllClientsViewModel.AddClientCommand}"/>
                                    <MenuItem Header="Удаление клиента" Command="{Binding AllClientsViewModel.RemoveClientCommand}"/>
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="RowEditEnding">
                                    <i:InvokeCommandAction Command="{Binding AllClientsViewModel.UpdateClientCommitCommand}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="BeginningEdit">
                                    <i:InvokeCommandAction Command="{Binding AllClientsViewModel.UpdateClientBeginCommand}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                    </DataGrid>


                </DockPanel>
                <DockPanel Grid.Column="2">

                        <DataGrid x:Name="accounts" 
                                  DockPanel.Dock="Top" 
                                  ItemsSource="{Binding AllAccountsViewModel.AccountsView}"
                                  SelectedItem="{Binding AllAccountsViewModel.SelectedAccount, Mode=TwoWay}"
                                  SelectionMode="Single"
                                  IsSynchronizedWithCurrentItem="True"
                                  AutoGenerateColumns="False" 
                                  CanUserAddRows="False"
                                  HorizontalGridLinesBrush="DarkGray"
                                  RowBackground="LightGray" 
                                  AlternatingRowBackground="White">
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Дата создания" Binding="{Binding CreatedDate}" IsReadOnly="True" Width="100"/>
                                <DataGridTextColumn Header="Начальная сумма" Binding="{Binding Amount}" IsReadOnly="True" Width="105"/>
                                <DataGridTextColumn Header="Ставка" Binding="{Binding InterestRate}" IsReadOnly="True" Width="100"/>
                                <DataGridComboBoxColumn Header="Тип счета" SelectedValueBinding="{Binding AccountTypesId}" SelectedValuePath="AccountTypesId" DisplayMemberPath="Name" 
                                                        ItemsSource="{Binding Source={StaticResource accountTypescb}}" />
                                <DataGridTextColumn Header="Месяцев" Binding="{Binding MonthPassed}" IsReadOnly="True" Width="100"/>
                                <DataGridTemplateColumn Header="Текущая дата" Width="100" IsReadOnly="True">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding CurrentDate}" />
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                    <DataGridTemplateColumn.CellEditingTemplate>
                                        <DataTemplate>
                                            <DatePicker SelectedDate="{Binding CurrentDate}" />
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellEditingTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTextColumn Header="Итого" Binding="{Binding Income}" IsReadOnly="True" Width="100"/>
                            </DataGrid.Columns>
                            <DataGrid.ContextMenu>
                            <ContextMenu>
                                    <MenuItem Header="Открыть счет" Command="{Binding AllAccountsViewModel.OpenAccountCommand}" />
                                    <MenuItem Header="Закрыть счет" Command="{Binding AllAccountsViewModel.CloseAccountCommand}" />
                                    <MenuItem Header="Снять со счета" Command="{Binding AllAccountsViewModel.WithdrawCommand}" />
                                    <MenuItem Header="Внести на счет" Command="{Binding AllAccountsViewModel.AddCommand}" />
                                    <MenuItem Header="Перевод на счет" Command="{Binding AllAccountsViewModel.TransactCommand}" />
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                    </DataGrid>
                </DockPanel>
                </Grid>
            </TabItem.Content>
        </TabItem>
        <TabItem>
            <TabItem.Header>
                Типы счетов
            </TabItem.Header>
            <TabItem.Content>                                   
                    
                <StackPanel Grid.Column="1">
                    <Border Padding="5" BorderThickness="1" BorderBrush="AntiqueWhite" CornerRadius="10">

                        <DataGrid x:Name="accountTypes"
                                  ItemsSource="{Binding AllAccountTypesViewModel.AccountTypes}"
                                  SelectedItem="{Binding AllAccountTypesViewModel.SelectedType, Mode=TwoWay}"
                                  SelectionMode="Single"
                                  IsSynchronizedWithCurrentItem="True"
                                  AutoGenerateColumns="False"
                                  CanUserAddRows="False">
                            <DataGrid.Resources>
                                <Style TargetType="{x:Type CheckBox}" x:Key="CheckBoxAddStyle">
                                    <Style.Setters>
                                        <Setter Property="HorizontalAlignment" Value="Center"/>
                                    </Style.Setters>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding CanAdded}" Value="False">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                                <Style TargetType="{x:Type CheckBox}" x:Key="CheckBoxWithdrawStyle">
                                    <Style.Setters>
                                        <Setter Property="HorizontalAlignment" Value="Center"/>
                                    </Style.Setters>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding CanWithdrawed}" Value="False">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                                <Style TargetType="{x:Type CheckBox}" x:Key="CheckBoxCloseStyle">
                                    <Style.Setters>
                                        <Setter Property="HorizontalAlignment" Value="Center"/>
                                    </Style.Setters>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding CanClose}" Value="False">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGrid.Resources>
                            <DataGrid.Columns>
                                <DataGridTextColumn     Header="Наименование счета"                  Binding="{Binding Path = Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                <DataGridComboBoxColumn Header="Департамент" SelectedValueBinding="{Binding DepartmentsRefId}" SelectedValuePath="DepartmentId" DisplayMemberPath="Name" 
                                                        ItemsSource="{Binding Source={StaticResource departmentscb}}" />

                                <DataGridCheckBoxColumn Header="Капитализация"                       Binding="{Binding Path = IsCapitalized, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                <DataGridCheckBoxColumn Header="Пересмотр условий"                   Binding="{Binding Path = AllowedRevision, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                <DataGridCheckBoxColumn Header="Доступно пополнение"                 Binding="{Binding Path = CanAdded, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                <DataGridCheckBoxColumn Header="Пополнение доступно после мин.срока" Binding="{Binding Path = AddingDependsOnMinTerm, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" EditingElementStyle="{StaticResource CheckBoxAddStyle}" Width="100"/>
                                <DataGridCheckBoxColumn Header="Доступно списание"                   Binding="{Binding Path = CanWithdrawed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                <DataGridCheckBoxColumn Header="Списание доступно после мин.срока"   Binding="{Binding Path = WithdrawingDependsOnMinTerm, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" EditingElementStyle="{StaticResource CheckBoxWithdrawStyle}"  Width="100"/>
                                <DataGridCheckBoxColumn Header="Доступно закрытие"                   Binding="{Binding Path = CanClose, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                <DataGridCheckBoxColumn Header="Закрытие доступно после мин.срока"   Binding="{Binding Path = ClosingDependsOnMinTerm, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" EditingElementStyle="{StaticResource CheckBoxCloseStyle}" Width="100"/>
                            </DataGrid.Columns>                                                        
                            <DataGrid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Добавить тип счета" Command="{Binding AllAccountTypesViewModel.AddTypeCommand}"/>
                                    <MenuItem Header="Удаленить тип счета" Command="{Binding AllAccountTypesViewModel.RemoveTypeCommand}"/>
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="RowEditEnding">
                                    <i:InvokeCommandAction Command="{Binding AllAccountTypesViewModel.UpdateTypeCommitCommand}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="BeginningEdit">
                                    <i:InvokeCommandAction Command="{Binding AllAccountTypesViewModel.UpdateTypeBeginCommand}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>

                        </DataGrid>
                    </Border>
                </StackPanel>                    
                
                
            </TabItem.Content>
        </TabItem>
        <TabItem>
            <TabItem.Header>
                История
            </TabItem.Header>
            <TabItem.Content>
                <ListView ItemsSource="{Binding AllLogsViewModel.Log}"
                              IsSynchronizedWithCurrentItem="True"
                              >
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="Событие" DisplayMemberBinding="{Binding LogMessage}" Width="650"/>
                            <GridViewColumn Header="Время" DisplayMemberBinding="{Binding Time}"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </TabItem.Content>
        </TabItem>
    </TabControl>
    



</Window>
